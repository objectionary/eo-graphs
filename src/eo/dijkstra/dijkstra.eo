+spdx SPDX-FileCopyrightText: Copyright (c) 2024-2025 Yegor Bugayenko
+spdx SPDX-License-Identifier: MIT
+alias org.eolang.io.stdout
+alias org.eolang.txt.sprintf
+alias org.eolang.txt.sscanf
+alias org.eolang.structs.map
+alias org.eolang.structs.list

# Creates list with size of 'sz' filled with 'val'.
[sz val] > createList
  [i] > creator
    if. > @
      i.lt ^.sz
      with.
        ^.creator (i.plus 1)
        ^.val
      list *
  creator 0 > @

# Creates sequence of numbers that begins with 'start' and ends with 'finish',
# with step 'step'. 'start' is included, 'finish' not. Returns a list.
[start finish step] > createSequence
  [i] > creator
    if. > @
      i.lt ^.finish
      with.
        ^.creator (i.plus ^.step)
        i
      list *
  creator start > @

# Graph edge in adjacency list implementation.
[to weight] > edge

# Graph implementation.
[args] > graph
  # Reads graph from adjacency list format.
  [i] > readGraph
    # Parses graph single line in adjacency list.
    [i] > lineParser
      if. > @
        ((sscanf "%d" (^.^.args.at i)).at 0).eq 100
        list *
        with.
          ^.lineParser (i.plus 2)
          edge
            (sscanf "%d" (^.^.args.at i)).at 0
            (sscanf "%d" (^.^.args.at (i.plus 1))).at 0
    lineParser (i.plus 1) > line
    if. > @
      i.lt ^.args.length
      with.
        ^.readGraph ((i.plus 2).plus (line.length.times 2))
        (sscanf "%d" (^.args.at i)).at 0
        line
      map *

  # Prints graph in adjacency list format.
  [graph] > printGraph
    # Prints line in graph's adjacency list.
    [line] > printLine
      while > @
        i.lt line.length > [i] >>
        [i] >>
          stdout > @
            sprintf
              " %d-%d"
              * (line.at i).to (line.at i).weight
    graph.keys > keys
    while > @
      i.lt keys.length > [i] >>
      [i] >>
        seq > @
          *
            stdout
              sprintf
                "\n%d"
                * (^.keys.at i)
            printLine (^.graph.found (^.keys.at i)).get
  readGraph 0 > @

# Main Dijkstra algorithm part.
[g start] > algo
  # Finds minimal-weight paths from 0 to all other nodes.
  [available stats] > findPaths
    # Updates distances and paths with chosen node.
    [node adjacent-nodes distances path] > updateDistance
      [i dists paths] > updater
        if. > @
          i.lt ^.adjacent-nodes.length
          if.
            lt.
              (dists.at ^.node).plus (^.adjacent-nodes.at i).weight
              dists.at (^.adjacent-nodes.at i).to
            ^.updater
              i.plus 1
              withi.
                dists.withouti (^.adjacent-nodes.at i).to
                (^.adjacent-nodes.at i).to
                (dists.at ^.node).plus (^.adjacent-nodes.at i).weight
              withi.
                paths.withouti (^.adjacent-nodes.at i).to
                (^.adjacent-nodes.at i).to
                ^.node
            ^.updater
              i.plus 1
              dists
              paths
          list (* dists paths)
      updater 0 distances path > @
    # Finds next node with minimal disace from 0.
    [minimum-index index] > findNextNode
      if. > @
        index.gte ^.available.length
        minimum-index
        if.
          or.
            minimum-index.eq -1
            lt.
              ^.distances.at (^.available.at index)
              ^.distances.at (^.available.at minimum-index)
          ^.findNextNode index (index.plus 1)
          ^.findNextNode minimum-index (index.plus 1)
    stats.at 0 > distances
    stats.at 1 > path
    findNextNode -1 0 > next-node
    if. > @
      next-node.eq -1
      path
      ^.findPaths
        available.withouti next-node
        updateDistance
          available.at next-node
          (^.g.found (available.at next-node)).get
          distances
          path
  findPaths > @
    createSequence 0 g.size 1
    ((createList g.size 2147483647).withouti 0).withi 0 0
    createList g.size -1

# Prints out the result: on the i's position parent of i is printed.
[path] > printResult
  seq > @
    *
      stdout
        "Paths: "
      while
        i.lt path.length > [i] >>
        [i] >>
          stdout > @
            sprintf
              "%d "
              * (^.path.at i)

# Dijkstra algorithm application.
[args] > dijkstraApp
  graph args > g
  algo g 0 > result
  printResult result > @
