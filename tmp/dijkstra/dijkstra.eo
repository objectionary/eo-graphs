+package ru.hse.eo_graphs.eo.dijkstra
+alias org.eolang.util.ieee754.infinity

[graphAdjList iStartVertex] > dijkstra
  processVertex > @
    initialQ
    initialS
    initialD
    initialP

  # Q is a set of vertices yet to be processed.
  # Initially, Q = {v ∊ 𝓥}, where 𝓥 is the set of vertices.
  # Here, we store indices of vertices, not vertices themselves.
  [] > initialQ
    map. > @
      (^.graphAdjList.adjacencies)
      []
        [currentAdjacency] > map
          currentAdjacency.vertex.i > @

  # S is a set of vertices that are already processed.
  # Initially, it is empty.
  [] > initialS
    * > @

  # D is an array of current path lengths to i'th vertices.
  # In time, this array converges to an array of 𝛿 values (minimum path lengths), one for each vertex.
  [] > initialD
    map. > @
      ^.graphAdjList.adjacencies
      []
        [currentAdjacency] > map
          if. > @
            eq.
              currentAdjacency.vertex.i
              ^.^.^.iStartVertex
            0.0
            infinity

  # P is an array where ith element refers to the previous element of the minimum path to ith vertex.
  # In time, this array converges to an array of π values (minimum path predecessors), one for each vertex.
  # This array is needed to reconstruct minimum paths from the Starting Edge to all the other edges.
  [] > initialP
    map. > @
      ^.graphAdjList.adjacencies
      []
        [currentAdjacency] > map
          if. > @
            eq.
              currentAdjacency.vertex.i
              ^.^.^.iStartVertex
            ^.^.^.iStartVertex
            -1

  [currentQ currentS currentD currentP] > processVertex
    findDeleteMinWeight currentQ currentD > newQandMin

    relax (newQandMin.min) currentD currentP (^.graphAdjList) > relaxed

    if. > @
      currentQ.length.eq 0
      currentP
      processVertex
        (newQandMin.newQ)
        currentS.append (newQandMin.min)
        relaxed.relaxedD
        relaxed.relaxedP

    [currV currentD currentP graph] > relax
      [relaxedD relaxedP] > resultStructure
      reduce. > @
        (graph.adjacencies.get currV).edges
        resultStructure
          currentD
          currentP
        []
          [updatedDP currentEdge] > reduce
            if. > @
              greater.
                updatedDP.relaxedD.get
                  currentEdge.ivertex
                add.
                  updatedDP.relaxedD.get
                    ^.^.currV
                  currentEdge.weight
              ^.^.resultStructure
                updatedDP.relaxedD.replace
                  currentEdge.ivertex
                  add.
                    updatedDP.relaxedD.get
                      ^.^.currV
                    currentEdge.weight
                updatedDP.relaxedP.replace
                  currentEdge.ivertex
                  ^.^.currV
              updatedDP

    [oldQ currentD] > findDeleteMinWeight
      [newQ min] > resultStructure
      resultStructure > @
        oldQ.remove minIndex
        oldQ.get minIndex

      min. > minVertex
        oldQ
        []
          [elemA indexA elemB indexB] > comparator
            ^.^.currentD.get elemA > dA
            ^.^.currentD.get elemB > dB
            if. > @
              less.
                dA
                dB
              -1
              if.
                greater.
                  dA
                  dB
                1
                0

      if. > minIndex
        minVertex.eq -1
        if.
          oldQ.length.eq 0
          -1
          0
        minVertex
