# SPDX-FileCopyrightText: Copyright (c) 2020-2025 Objectionary
# SPDX-License-Identifier: MIT

+alias org.eolang.io.stdout
+alias org.eolang.txt.sprintf
+alias org.eolang.txt.sscanf
+alias org.eolang.collections.list

[n1 n2 length] > graphedge

[node edges] > nodeInEdges
  reduce. > @
    list
      edges
    FALSE
    [accum current]
      or. > @
        accum
        or.
          eq.
            ^.node
            current.n1
          eq.
            ^.node
            current.n2

[node nArray] > nodeInArray
  reduce. > @
    list
      nArray
    FALSE
    [accum current]
      or. > @
        accum
        eq.
          ^.node
          current

[edges] > nodes
  reduce. > @
    list
      edges
    *
    [accum current]
      not. > addN1!
        nodeInArray
          current.n1
          accum
      not. > addN2!
        nodeInArray
          current.n2
          accum
      if. > @
        and.
          addN1
          addN2
        with.
          with.
            accum
            current.n1
          current.n2
        if.
          and.
            addN1
            addN2.not
          with.
            accum
            current.n1
          if.
            and.
              addN1.not
              addN2
            with.
              accum
              current.n2
            accum

[s1 s2] > join
  s1.as-bytes > x1
  s2.as-bytes > x2
  x1.concat x2 > x3
  x3.as-string > @

[args...] > app
  [] > graph!
    [i] > getEdges
      if. > @
        (i.plus 2).lt
          ^.^.args.length
        with.
          ^.getEdges
            i.plus 3
          graphedge
            (sscanf "%d" (^.^.args.at i)).at 0
            (sscanf "%d" (^.^.args.at (i.plus 1))).at 0
            (sscanf "%d" (^.^.args.at (i.plus 2))).at 0
        *
    if. > @
      ^.args.length.lt 3
      *
      getEdges 0

  nodes > graphNodes!
    graph

  [mi id] > getMin
    if. > @
      not.
        lt.
          id
          ^.graph.length
      mi
      if.
        lt.
          (^.graph.at id).length
          (^.graph.at mi).length
        ^.getMin id (id.plus 1)
        ^.getMin mi (id.plus 1)

  graph.at (getMin 0 0) > firstEdge
  [step] > findEdges
    [min id] > findNext
      if. > @
        not.
          lt.
            id
            ^.^.graph.length
        min
        seq
          nodeInEdges > n1InStep!
            (^.^.graph.at id).n1
            ^.step
          nodeInEdges > n2InStep!
            (^.^.graph.at id).n2
            ^.step
          if.
            and.
              or.
                and.
                  n1InStep
                  n2InStep.not
                and.
                  n1InStep.not
                  n2InStep
              or.
                min.eq -1
                lt.
                  (^.^.graph.at id).length
                  (^.^.graph.at min).length
            ^.findNext id (id.plus 1)
            ^.findNext min (id.plus 1)
    findNext -1 0 > res
    if. > @
      eq.
        -1
        res
      step
      ^.findEdges
        with.
          step
          (^.graph.at res)
  findEdges (* firstEdge) > ans!
  [i] > output
    if. > @
      i.eq
        ans.length
      ""
      join
        sprintf
          "(%d %d - %d) "
          (^.ans.at i).n1
          (^.ans.at i).n2
          (^.ans.at i).length
        ^.output (i.plus 1)
  join "MST: " (output 0) > ret
  stdout > @
    sprintf
      "%s \n"
      ret
